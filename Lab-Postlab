/*
 * Prelab no.4 
 *
 * Created: 31/03/2025
 * Author: Diego Alejandro Ramos Rodas
 * Description: 
 */
/****************************************/
//Encabezado (Libraries)
#define	F_CPU 16000000
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
uint8_t counter0;
uint8_t timcount;
uint8_t alternador;
uint8_t indx;
uint8_t display;
uint8_t show;
uint8_t tabla[] = {0x3F,0x06, 0x5B, 0x4F, 0X66, 0x6D, 0x7D, 0x07, 0x7F, 0x67, 0x77, 0x7C, 0X58, 0x5E, 0x79, 0x71};
/****************************************/
// Function prototypes
void setup();
void init_TMR0();
void init_ADC();
/****************************************/
// Main Function
int main(void)
{
	setup();
	//init_TMR0();
	init_ADC();
	while (1)
	{
		switch (alternador){

			case 0:
			PORTD = 0;
			PORTB = 0;
			PORTB |= (1 << PORTB0) | (1 << PORTB1); //Desactivar Display 1 Y 2
			PORTB |= (1 << PORTB2); //Activar contador de leds
			PORTD = counter0;
			alternador = (alternador+1)%3;
			break;
			case 1:
			
			PORTD = 0;
			PORTB = 0; 
			PORTB |= ( 1 << PORTB1); //Desactivar display 2
			indx = ((display & 0xF0) >> 4); //Extraer digito mas significativo
			show = tabla[indx];
			PORTD = show; 
			alternador = (alternador+1)%3;
			break;
			case 2:
			
			PORTD = 0;
			PORTB = 0;
			PORTB |= (1 << PORTB0); //Desactivar display 1
			indx = (display & 0x0F); //Extraer digito menos significativo
			show = tabla[indx];
			PORTD = show;
			alternador = (alternador+1)%3;
			break;
		}
		//_delay_ms(1);	
	}
}
/****************************************/
// NON-Interrupt subroutines
void setup(){
	cli();
	UCSR0B = 0x00;
	DDRD = 0xFF; //Salida para display y leds
	DDRB = 0xFF; //Salida para multiplexados
	DDRC = 0x00; //Entradas para los botones
	PORTC |= (1 << PORTC0) | (1 << PORTC1); //Pullup para pc0 y pc1
	//interrupcion de btn en puerto c
	PCICR |= (1 << PCIE1); 
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);
	sei();
}
void init_TMR0(void){
	cli();
	TCCR0B |= (1<<CS00) | (1<<CS01); //| (1<<CS02); prescaler 64
	TCNT0 = 6;  //int cada 1ms
	TIMSK0 |= (1<<TOIE0);
	sei();
}
void init_ADC(void){
	cli();
	
	ADMUX = 0;
	ADMUX |= (1 << REFS0); //AVcc
	ADMUX |= (1 << ADLAR); //Corrido a la izquierda
	ADMUX |= (1 << MUX2) | (1 << MUX1); //ADC6

	ADCSRA = 0;
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0); //pr e scaler a 8
	ADCSRA |= (1 << ADIE); //ENABLE INTERRUPS 
	ADCSRA |= (1 << ADEN); //habilitar conversiones
	ADCSRA |= (1 << ADSC); //start convertion
	
	sei();
}	
//Interrupcion de boton para contador binario
ISR(PCINT1_vect){
	if ((PINC & 0b00000001) == !(1 << PORTC0)) {
		counter0++;
	}
	if ((PINC & 0b00000010) == !(1 << PORTC1)){
		counter0--;
	}
}

/****************************************/
// Interrupt routines
ISR(ADC_vect){
	display = ADCH;
	if (display > counter0){
		PORTB |= (1 << PORTB5); //Encender alarma si adc > contadorleds
	}
	else if (display <= counter0){
		PORTB &= ~(1 << PORTB5); //Mantener apagada alarma
	}
	ADCSRA |= (1 << ADSC);	//reiniciar interrupciones
}
